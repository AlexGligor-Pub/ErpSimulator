// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20240716064238_LocalDB")]
    partial class LocalDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.DemoOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("State")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DemoOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 7, 16, 9, 42, 37, 755, DateTimeKind.Local).AddTicks(2668),
                            IsDeleted = false,
                            Name = "Order 1",
                            State = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 7, 16, 9, 42, 37, 755, DateTimeKind.Local).AddTicks(2718),
                            IsDeleted = false,
                            Name = "Order 2",
                            State = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 7, 16, 9, 42, 37, 755, DateTimeKind.Local).AddTicks(2720),
                            IsDeleted = false,
                            Name = "Order 3",
                            State = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 7, 16, 9, 42, 37, 755, DateTimeKind.Local).AddTicks(2722),
                            IsDeleted = false,
                            Name = "Order 4",
                            State = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 7, 16, 9, 42, 37, 755, DateTimeKind.Local).AddTicks(2724),
                            IsDeleted = false,
                            Name = "Order 5",
                            State = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.OrdersBucket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("UnsOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UnsOrderId");

                    b.ToTable("OrdersBucket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 7, 16, 6, 42, 37, 755, DateTimeKind.Utc).AddTicks(3037),
                            EndDate = new DateTime(2024, 7, 25, 9, 42, 37, 755, DateTimeKind.Local).AddTicks(3042),
                            RequestCount = 2,
                            StartDate = new DateTime(2024, 7, 18, 9, 42, 37, 755, DateTimeKind.Local).AddTicks(3039),
                            State = 1,
                            UnsOrderId = "order1"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 7, 16, 6, 42, 37, 755, DateTimeKind.Utc).AddTicks(3044),
                            EndDate = new DateTime(2024, 8, 3, 9, 42, 37, 755, DateTimeKind.Local).AddTicks(3045),
                            RequestCount = 1,
                            StartDate = new DateTime(2024, 7, 20, 9, 42, 37, 755, DateTimeKind.Local).AddTicks(3044),
                            State = 1,
                            UnsOrderId = "order2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UNS.Component", b =>
                {
                    b.Property<string>("ComponentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnsOrderID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ComponentId");

                    b.HasIndex("UnsOrderID");

                    b.ToTable("Components");

                    b.HasData(
                        new
                        {
                            ComponentId = "Material1",
                            Quantity = 100,
                            UnitOfMeasure = "LTR"
                        },
                        new
                        {
                            ComponentId = "Material2",
                            Quantity = 200,
                            UnitOfMeasure = "LTR"
                        },
                        new
                        {
                            ComponentId = "SEMI",
                            Quantity = 300,
                            UnitOfMeasure = "LTR"
                        },
                        new
                        {
                            ComponentId = "Material4",
                            Quantity = 400,
                            UnitOfMeasure = "LTR"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UNS.OperationsInstruction", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Equipment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UnsOrderID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkMasterID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkMasterVersion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("UnsOrderID");

                    b.ToTable("OperationsInstructions");

                    b.HasData(
                        new
                        {
                            ID = "order1",
                            Description = "Operations for Order 1",
                            EndTime = new DateTime(2024, 7, 16, 10, 42, 37, 755, DateTimeKind.Local).AddTicks(2902),
                            Equipment = "EQ1",
                            StartTime = new DateTime(2024, 7, 16, 9, 42, 37, 755, DateTimeKind.Local).AddTicks(2901),
                            WorkCenter = "Area1",
                            WorkMasterID = "WM1",
                            WorkMasterVersion = "1.0"
                        },
                        new
                        {
                            ID = "order2",
                            Description = "Operations for Order 2",
                            EndTime = new DateTime(2024, 7, 16, 12, 42, 37, 755, DateTimeKind.Local).AddTicks(2906),
                            Equipment = "EQ2",
                            StartTime = new DateTime(2024, 7, 16, 11, 42, 37, 755, DateTimeKind.Local).AddTicks(2905),
                            WorkCenter = "Area1",
                            WorkMasterID = "WM2",
                            WorkMasterVersion = "1.1"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UNS.UnsOrder", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Client")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ERPState")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Executor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<string>("OrderState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdersBucketId")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfMeasure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrdersBucketId");

                    b.ToTable("UnsOrders");

                    b.HasData(
                        new
                        {
                            ID = "order1",
                            Client = 2,
                            Description = "Order 1 description",
                            ERPState = 0,
                            EndTime = new DateTime(2024, 7, 16, 10, 42, 37, 755, DateTimeKind.Local).AddTicks(2888),
                            Executor = "Executor1",
                            Facility = "CJ",
                            MaterialId = "SEMI",
                            OrderQuantity = 100,
                            OrderState = "Open",
                            Priority = "High",
                            StartTime = new DateTime(2024, 7, 16, 9, 42, 37, 755, DateTimeKind.Local).AddTicks(2887),
                            Status = "Active",
                            Type = "1",
                            UnitOfMeasure = "LTR"
                        },
                        new
                        {
                            ID = "order2",
                            Client = 2,
                            Description = "Order 2 description",
                            ERPState = 0,
                            EndTime = new DateTime(2024, 7, 16, 12, 42, 37, 755, DateTimeKind.Local).AddTicks(2896),
                            Executor = "Executor2",
                            Facility = "MS",
                            MaterialId = "SEMI",
                            OrderQuantity = 200,
                            OrderState = "Closed",
                            Priority = "Medium",
                            StartTime = new DateTime(2024, 7, 16, 11, 42, 37, 755, DateTimeKind.Local).AddTicks(2894),
                            Status = "Inactive",
                            Type = "1",
                            UnitOfMeasure = "LTR"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UNS.UnsOrderComponentMap", b =>
                {
                    b.Property<string>("UnsOrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ComponentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UnsOrderId", "ComponentId");

                    b.HasIndex("ComponentId");

                    b.ToTable("UnsOrderComponentMap");

                    b.HasData(
                        new
                        {
                            UnsOrderId = "order1",
                            ComponentId = "Material1"
                        },
                        new
                        {
                            UnsOrderId = "order1",
                            ComponentId = "Material2"
                        },
                        new
                        {
                            UnsOrderId = "order2",
                            ComponentId = "SEMI"
                        },
                        new
                        {
                            UnsOrderId = "order2",
                            ComponentId = "Material4"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UNS.UnsOrderOperationstMap", b =>
                {
                    b.Property<string>("UnsOrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationsInstructionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UnsOrderId", "OperationsInstructionId");

                    b.HasIndex("OperationsInstructionId");

                    b.ToTable("UnsOrderOperationstMap");

                    b.HasData(
                        new
                        {
                            UnsOrderId = "order1",
                            OperationsInstructionId = "order1"
                        },
                        new
                        {
                            UnsOrderId = "order2",
                            OperationsInstructionId = "order2"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OrdersBucket", b =>
                {
                    b.HasOne("Domain.Entities.UNS.UnsOrder", "UnsOrder")
                        .WithMany()
                        .HasForeignKey("UnsOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnsOrder");
                });

            modelBuilder.Entity("Domain.Entities.UNS.Component", b =>
                {
                    b.HasOne("Domain.Entities.UNS.UnsOrder", null)
                        .WithMany("ComponentList")
                        .HasForeignKey("UnsOrderID");
                });

            modelBuilder.Entity("Domain.Entities.UNS.OperationsInstruction", b =>
                {
                    b.HasOne("Domain.Entities.UNS.UnsOrder", null)
                        .WithMany("OperationsInstruction")
                        .HasForeignKey("UnsOrderID");
                });

            modelBuilder.Entity("Domain.Entities.UNS.UnsOrder", b =>
                {
                    b.HasOne("Domain.Entities.OrdersBucket", "OrdersBucket")
                        .WithMany("UnsOrders")
                        .HasForeignKey("OrdersBucketId");

                    b.Navigation("OrdersBucket");
                });

            modelBuilder.Entity("Domain.Entities.UNS.UnsOrderComponentMap", b =>
                {
                    b.HasOne("Domain.Entities.UNS.Component", "Component")
                        .WithMany("UnsOrderList")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UNS.UnsOrder", "UnsOrder")
                        .WithMany("ComponentListMap")
                        .HasForeignKey("UnsOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("UnsOrder");
                });

            modelBuilder.Entity("Domain.Entities.UNS.UnsOrderOperationstMap", b =>
                {
                    b.HasOne("Domain.Entities.UNS.OperationsInstruction", "OperationsInstruction")
                        .WithMany("UnsOrderList")
                        .HasForeignKey("OperationsInstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UNS.UnsOrder", "UnsOrder")
                        .WithMany("OperationsInstructionMap")
                        .HasForeignKey("UnsOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationsInstruction");

                    b.Navigation("UnsOrder");
                });

            modelBuilder.Entity("Domain.Entities.OrdersBucket", b =>
                {
                    b.Navigation("UnsOrders");
                });

            modelBuilder.Entity("Domain.Entities.UNS.Component", b =>
                {
                    b.Navigation("UnsOrderList");
                });

            modelBuilder.Entity("Domain.Entities.UNS.OperationsInstruction", b =>
                {
                    b.Navigation("UnsOrderList");
                });

            modelBuilder.Entity("Domain.Entities.UNS.UnsOrder", b =>
                {
                    b.Navigation("ComponentList");

                    b.Navigation("ComponentListMap");

                    b.Navigation("OperationsInstruction");

                    b.Navigation("OperationsInstructionMap");
                });
#pragma warning restore 612, 618
        }
    }
}
