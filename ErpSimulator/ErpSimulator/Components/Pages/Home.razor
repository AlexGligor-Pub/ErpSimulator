@page "/"

<PageTitle>Home</PageTitle>

<h1>Informational Dashboard about Orders</h1>

<style>
    .ChartContainer {
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        margin-top: 20px;
    }

    .ProviderStatus {
        margin-top: 20px;
    }
</style>

<div class="ChartContainer">
    <DoughnutChart @ref="orderStatusChart" Width="300" />
    <DoughnutChart @ref="orderPriorityChart" Width="300" />
    <Card Style="width:12rem;">
        <CardBody>
            <CardTitle>Connection with other Providers</CardTitle>
            @switch (ProviderConnection.Status)
            {
                case ProviderStatus.Connected:
                    <div class="ProviderStatus">
                        <span>Connected</span>
                        <Icon Name="IconName.CheckCircleFill" Color="IconColor.Success" />
                    </div>
                    break;
                case ProviderStatus.NotConnected:
                    <div class="ProviderStatus">
                        <span>Not Connected</span>
                        <Icon Name="IconName.XCircleFill" />
                    </div>
                    break;
                default:
                    <div class="ProviderStatus">
                        <span>Pending</span>
                        <Icon Name="IconName.ArrowCounterclockwise" Color="IconColor.Info" />
                    </div>
                    break;
            }
        </CardBody>
    </Card>
</div>


@code {
    private DoughnutChart orderStatusChart = default!;
    private DoughnutChartOptions orderStatusChartOptions = default!;
    private ChartData orderStatusChartData = default!;

    private DoughnutChart orderPriorityChart = default!;
    private DoughnutChartOptions orderPriorityChartOptions = default!;
    private ChartData orderPriorityChartData = default!;

    private string[]? backgroundColors;
    private Random random = new();

    private List<double?> orderPriorityData = new List<double?>() { 30.00, 43.55, 21.30 };
    private List<string> orderPriorityLabels = new List<string>() { "Low", "Medium", "High" };

    enum ProviderStatus
    {
        Connected, 
        NotConnected,
        Pending
    };
    static class ProviderConnection
    {
        public const string ProviderName = "SAP";
        public const ProviderStatus Status = ProviderStatus.Connected;
    };

    private List<double?> orderStatusData = new List<double?>() { 10.00, 23.55, 62.30, 5.00 };
    private List<string> orderStatusLabels = new List<string>() { "New", "Active", "Completed", "Blocked" };

    protected override void OnInitialized()
    {
        backgroundColors = ColorUtility.CategoricalTwelveColors;
        orderStatusChartData = new ChartData 
            { 
                Labels = orderStatusLabels, 
                Datasets = GetDefaultDataSets(orderStatusData) 
            };

        orderStatusChartOptions = new();
        orderStatusChartOptions.Responsive = false;
        orderStatusChartOptions.Plugins.Title!.Text = "Orders by Status:";
        orderStatusChartOptions.Plugins.Title.Display = true;

        orderPriorityChartData = new ChartData
            {
                Labels = orderPriorityLabels,
                Datasets = GetDefaultDataSets(orderPriorityData)
            };

        orderPriorityChartOptions = new();
        orderPriorityChartOptions.Responsive = false;
        orderPriorityChartOptions.Plugins.Title!.Text = "Orders by Priority:";
        orderPriorityChartOptions.Plugins.Title.Display = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await orderStatusChart.InitializeAsync(orderStatusChartData, orderStatusChartOptions);

            await orderPriorityChart.InitializeAsync(orderPriorityChartData, orderPriorityChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    #region Data Preparation
    private List<IChartDataset> GetDefaultDataSets(List<double?> chartData)
    {
        return new List<IChartDataset>()
        {
            new DoughnutChartDataset () {
                Label = $"Order",
                Data = chartData,
                BackgroundColor = GetRandomBackgroundColors(chartData.Count)
            }
        };
    }

    private List<string> GetRandomBackgroundColors(int limit)
    {
        var colors = new List<string>();
        for (var index = 0; index < limit; index++)
        {
            colors.Add(backgroundColors![index]);
        }

        return colors;
    }

    #endregion  Data Preparation
}