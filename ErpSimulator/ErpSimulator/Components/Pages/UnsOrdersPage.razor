@page "/unsOrders"
@using Domain.Entities
@using System.Text.Json;
@using Domain.Entities.UNS
@using Domain.Interfaces
@using Infrastructure.Services
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject UnsOrderService UnsOrderService
@inject OrdersBucketService OrdersBucketService
@inject NavigationManager _nav


<PageTitle>Orders</PageTitle>

<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<style>
        .search-container {
            display: flex;
            align-items: center;
            position: relative;
        }
        .search-container input {
            padding-right: 30px; 
        }
        .search-icon {
            position: absolute;
            right: 10px;
            color: #aaa;
        }
        .search-container input {
            width: 250px; 
        }
 </style>

<div class="d-flex justify-content-between align-items-center">
    <h1>Orders</h1>
    <div class="search-container">
        <InputText class="form-control-sm" @bind-Value="searchObject" placeholder="Search" @oninput="HandleInputChange" />
        <i class="fas fa-search search-icon"></i>
    </div>
    <button class="btn btn-primary" @onclick="openCreateOrder">Create</button>
</div>
<hr />


@if (demoOrders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>ERP State</th>
                <th>Description</th>
                <th>Type</th>
                <th>Start</th>
                <th>End</th>
                <th>Priority</th>
                <th>State</th>
                <th>Status</th>
                <th>MaterialId</th>
                <th>Component#</th>
                <th>Operation#</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var order in demoOrders)
            {
                <tr @onclick="()=>SelectedOrder(order)">
                    <td>@order.ID</td>
                    <td>@order.ERPState</td>
                    <td>@order.Description</td>
                    <td>@order.Type</td>
                    <td>@order.StartTime</td>
                    <td>@order.EndTime</td>
                    <td>@order.Priority</td>
                    <td>@order.OrderState</td>
                    <td>@order.Status</td>
                    <td>@order.MaterialId</td>
                    <td>@order.ComponentListMap.Count</td>
                    <td>@order.OperationsInstructionMap.Count</td>
                </tr>
            }
        </tbody>
    </table>
    </div>

    <ErpSimulator.Components.Pages.Common.Modal IsVisible="@isEditModalVisible" IsVisibleChanged="@((bool value) => isEditModalVisible = value)">
        <div class="p-2 m-2">
            <button class="btn btn-primary" @onclick="CreateBucket">Create Bucket</button>
            <hr />
            <EditForm Model="@selectedOrder" OnValidSubmit="UpdateOrder">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="form-group p-2">
                    <div style="display: flex; flex-direction: row; gap: 100px; margin-top: 20px">
                        <div style="display: flex; flex-direction: column; gap: 10px">
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;"> Description:</div>
                                <InputText @bind-Value="selectedOrder!.Description" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">Type:</div>
                                <InputText @bind-Value="selectedOrder!.Type" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">Start:</div>
                                <InputDate @bind-Value="selectedOrder!.StartTime" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">End:</div>
                                <InputDate @bind-Value="selectedOrder!.EndTime" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">Priority:</div>
                                <InputText @bind-Value="selectedOrder!.Priority" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">State:</div>
                                <InputText @bind-Value="selectedOrder!.OrderState" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">Status:</div>
                                <InputText @bind-Value="selectedOrder!.Status" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">MaterialId:</div>
                                <InputText @bind-Value="selectedOrder!.MaterialId" />
                            </label>
                            <label>Components:</label>
                                <div id="ScrollCB" style="height:140px;width:250px;overflow:auto; margin-bottom: 10px">
                                
                                </div>
                            <label>Operations Instructions:</label>
                                <div id="ScrollCB" style="height:140px;width:250px;overflow:auto">
                                
                                </div>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between mt-2">
                    <button type="submit" class="btn btn-success">Save</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteOrder">Delete</button>
                </div>
            </EditForm>
        </div>


    </ErpSimulator.Components.Pages.Common.Modal>

    <ErpSimulator.Components.Pages.Common.Modal IsVisible="@isCreateModalVisible" IsVisibleChanged="@((bool value) => isCreateModalVisible = value)" >
        <div class="form-group p-2" style="width: 400px">
            <EditForm Model="@OrderForm" OnValidSubmit="CreateOrder">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="form-group p-2">
            <div style="display: flex; flex-direction: row; gap: 100px; margin-top: 20px">
                <div style="display: flex; flex-direction: column; gap: 10px">
                    <label style="display: flex; flex-direction: row;">
                        <div style="width: 100px;">ID:</div>
                        <InputText @bind-Value="OrderForm!.ID" />
                    </label>
                    <label style="display: flex; flex-direction: row;">
                        <div style="width: 100px;"> Description:</div>
                        <InputText @bind-Value="OrderForm!.Description" />
                    </label>
                    <label style="display: flex; flex-direction: row;">
                        <div style="width: 100px;">Type:</div>
                        <InputText @bind-Value="OrderForm!.Type" />
                    </label>
                    <label style="display: flex; flex-direction: row;">
                        <div style="width: 100px;">Start:</div>
                        <InputDate @bind-Value="OrderForm!.StartTime" />
                    </label>
                    <label style="display: flex; flex-direction: row;">
                        <div style="width: 100px;">End:</div>
                        <InputDate @bind-Value="OrderForm!.EndTime" />
                    </label>
                    <label style="display: flex; flex-direction: row;">
                        <div style="width: 100px;">Priority:</div>
                        <InputText @bind-Value="OrderForm!.Priority" />
                    </label>
                    <label style="display: flex; flex-direction: row;">
                        <div style="width: 100px;">State:</div>
                        <InputText @bind-Value="OrderForm!.OrderState" />
                    </label>
                    <label style="display: flex; flex-direction: row;">
                        <div style="width: 100px;">Status:</div>
                        <InputText @bind-Value="OrderForm!.Status" />
                    </label>
                    <label style="display: flex; flex-direction: row;">
                        <div style="width: 100px;">MaterialId:</div>
                        <InputText @bind-Value="OrderForm!.MaterialId" />
                    </label>
                            
                    <label>Components:</label>
                        <div id="ScrollCB" style="height:140px;width:250px;overflow:auto; margin-bottom: 10px">
                                
                        </div>
                    <label>Operations Instructions:</label>
                        <div id="ScrollCB" style="height:140px;width:250px;overflow:auto">
                                
                        </div>
                            
                </div>
                
            </div>
            </div>

        <div style="margin-top: 15px">
            <button type="submit">Submit</button>
        </div>
        </EditForm>
        </div>

    </ErpSimulator.Components.Pages.Common.Modal>
}

@code {
    private List<UnsOrder>? demoOrders;
    private List<UnsOrder>? list;
    private string UnsOrderJson;
    private bool isEditModalVisible = false;
    private bool isCreateModalVisible = false;
    private UnsOrder selectedOrder;
    public List<string> components = new List<string>();
    public List<string> operationInstructions = new List<string>();
    public UnsOrder? OrderForm = new UnsOrder();
    private string searchObject;

    protected override async Task OnInitializedAsync()
    {
        demoOrders = await UnsOrderService.GetUnsOrdersAsync();
        list = demoOrders.ToList();
    }

    private void openCreateOrder()
    {
        isCreateModalVisible = true;
    }

    private async Task CreateOrder()
    {
        await UnsOrderService.CreateUnsOrderAsync(OrderForm);
        isCreateModalVisible = false;
        OrderForm.ComponentListMap = new List<UnsOrderComponentMap>();
        OrderForm.OperationsInstructionMap = new List<UnsOrderOperationstMap>();
        demoOrders.Add(OrderForm);
    }

    private void SelectedOrder(UnsOrder order)
    {
        isEditModalVisible = true;
        UnsOrderJson = JsonSerializer.Serialize(order, new JsonSerializerOptions { WriteIndented = true });
        selectedOrder = order;
    }

    private async Task UpdateOrder()
    {
        await UnsOrderService.UpdateUnsOrderAsync(selectedOrder);
        isEditModalVisible = false;
        StateHasChanged();
    }

    private async Task DeleteOrder()
    {
        if (selectedOrder != null)
        {
            await UnsOrderService.DeleteUnsOrderAsync(selectedOrder.ID);
            demoOrders.Remove(selectedOrder);
            selectedOrder = null;
            isEditModalVisible = false;
            StateHasChanged();
        }
    }

    private async Task CreateBucket()
    {
        if (selectedOrder != null)
        {
            var newBucketOrder = new OrdersBucket
                {
                    UnsOrderId = selectedOrder.ID,
                    RequestCount = 1,
                    StartDate = DateTime.Now,
                    EndDate = DateTime.Now.AddDays(7)
                };

            await OrdersBucketService.CreateOrdersBucketAsync(newBucketOrder);
            StateHasChanged();
        }

        isEditModalVisible = false;
    }

    private async Task HandleInputChange(ChangeEventArgs e)
    {
        var findStr = e.Value.ToString();

        demoOrders = list.Where(art => art.ID.ToString().Contains(findStr.ToLower())
            || art.Description.ToLower().Contains(findStr.ToLower())
            || art.Type.ToLower().Contains(findStr.ToLower())
            || art.StartTime.ToString().Contains(findStr.ToLower())
            || art.EndTime.ToString().Contains(findStr.ToLower())
            || art.Priority.ToLower().Contains(findStr.ToLower())
            || art.OrderState.ToLower().Contains(findStr.ToLower())
            || art.Status.ToLower().Contains(findStr.ToLower())
            || art.MaterialId.ToLower().Contains(findStr.ToLower())
            || art.ERPState.ToString().ToLower().Contains(findStr.ToLower())).ToList();
        StateHasChanged();
    }

}
