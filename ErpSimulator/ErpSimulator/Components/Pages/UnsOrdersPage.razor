@page "/unsOrders"
@using Domain.Entities
@using System.Text.Json;
@using Domain.Entities.UNS
@using Domain.Interfaces
@using Infrastructure.Services
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject UnsOrderService UnsOrderService
@inject OrdersBucketService OrdersBucketService
@inject NavigationManager _nav

<PageTitle>Orders</PageTitle>

<h1>Orders</h1>

@if (demoOrders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>ERP State</th>
                    <th>Description</th>
                    <th>Type</th>
                    <th>Start</th>
                    <th>End</th>
                    <th>Priority</th>
                    <th>State</th>
                    <th>Status</th>
                    <th>MaterialId</th>
                    <th>Component#</th>
                    <th>Operation#</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var order in demoOrders)
                {
                    <tr @onclick="()=>SelectedOrder(order)">
                        <td>@order.ID</td>
                        <td>@order.ERPState</td>
                        <td>@order.Description</td>
                        <td>@order.Type</td>
                        <td>@order.StartTime</td>
                        <td>@order.EndTime</td>
                        <td>@order.Priority</td>
                        <td>@order.OrderState</td>
                        <td>@order.Status</td>
                        <td>@order.MaterialId</td>
                        <td>@order.ComponentListMap.Count</td>
                        <td>@order.OperationsInstructionMap.Count</td>
                    </tr>
                }
            </tbody>
        </table>
        <button type="button" @onclick="CreateUNSOrder">Create order</button>
    </div>

    <ErpSimulator.Components.Pages.Common.Modal IsVisible="@isModalVisible" IsVisibleChanged="@((bool value) => isModalVisible = value)">
        <button class="btn btn-primary" @onclick="CreateBucket">Create Bucket</button>
        <hr />
        <pre>@UnsOrderJson</pre>
    </ErpSimulator.Components.Pages.Common.Modal>

    <ErpSimulator.Components.Pages.Common.Modal IsVisible="@isModalVisible" IsVisibleChanged="@((bool value) => isModalVisible = value)">
        <div class="p-2 m-2">
            <EditForm Model="@selectedOrder" OnValidSubmit="SaveChanges">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="form-group p-2">
                    <div style="display: flex; flex-direction: row; gap: 100px; margin-top: 20px">
                        <div style="display: flex; flex-direction: column; gap: 10px">
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;"> Description:</div>
                                <InputText @bind-Value="selectedOrder!.Description" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">Type:</div>
                                <InputText @bind-Value="selectedOrder!.Type" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">Start:</div>
                                <InputDate @bind-Value="selectedOrder!.StartTime" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">End:</div>
                                <InputDate @bind-Value="selectedOrder!.EndTime" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">Priority:</div>
                                <InputText @bind-Value="selectedOrder!.Priority" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">State:</div>
                                <InputText @bind-Value="selectedOrder!.OrderState" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">Status:</div>
                                <InputText @bind-Value="selectedOrder!.Status" />
                            </label>
                            <label style="display: flex; flex-direction: row;">
                                <div style="width: 100px;">MaterialId:</div>
                                <InputText @bind-Value="selectedOrder!.MaterialId" />
                            </label>
                        </div>
                        <div style="display: flex; flex-direction: column">
                            <label>Components:</label>
                            <div id="ScrollCB" style="height:140px;width:250px;overflow:auto; margin-bottom: 10px">
                                <select multiple @bind="selectedOrder.ComponentList">
                                    @foreach (var component in components)
                                    {
                                        <option value="@component" key="@component">@component.ComponentId</option>
                                    }
                                </select>
                            </div>
                            <label>Operations Instructions:</label>
                            <div id="ScrollCB" style="height:140px;width:250px;overflow:auto">
                                <select multiple @bind="selectedOrder.OperationsInstruction">
                                    @foreach (var operationInstruction in operationInstructions)
                                    {
                                        <option value="@operationInstruction" key="@operationInstruction">@operationInstruction.Description</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between mt-2">
                    <button type="submit" class="btn btn-success">Save</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteOrder">Delete</button>
                </div>
            </EditForm>
        </div>


    </ErpSimulator.Components.Pages.Common.Modal>

}

@code {
    private List<UnsOrder>? demoOrders;
    private string UnsOrderJson;
    private UnsOrder selectedOrder;
    public List<Component> components = new List<Component>();
    public List<OperationsInstruction> operationInstructions = new List<OperationsInstruction>();
    private bool isModalVisible = false;
    private UnsOrder selectedOrder;

    protected override async Task OnInitializedAsync()
    {
        demoOrders = await UnsOrderService.GetUnsOrdersAsync();
    }

    private void CreateUNSOrder()
    {
        _nav.NavigateTo("/createUNSOrder");
    }

    private void SelectedOrder(UnsOrder order)
    {
        selectedOrder = order;
        isModalVisible = true;
        UnsOrderJson = JsonSerializer.Serialize(order, new JsonSerializerOptions { WriteIndented = true });
    }

    private async Task DeleteOrder()
    {
        if (selectedOrder != null)
        {
            await UnsOrderService.DeleteUnsOrderAsync(selectedOrder.ID);
            demoOrders.Remove(selectedOrder);
            selectedOrder = null;
            isModalVisible = false;
            StateHasChanged();
        }
    }

    private async Task CreateBucket()
    {
        if (selectedOrder != null)
        {
            var newBucketOrder = new OrdersBucket
                {
                    UnsOrderId = selectedOrder.ID,
                    RequestCount = 1,
                    StartDate = DateTime.Now,
                    EndDate = DateTime.Now.AddDays(7)
                };

            await OrdersBucketService.CreateOrdersBucketAsync(newBucketOrder);
            StateHasChanged();
        }

        isModalVisible = false;
    }

    private async Task SaveChanges()
    {
        await UnsOrderService.UpdateUnsOrderAsync(selectedOrder);
        isModalVisible = false;
        StateHasChanged();
    }

}
