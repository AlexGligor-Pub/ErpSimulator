@page "/unsOrders"
@using Domain.Entities
@using System.Text.Json;
@using Domain.Entities.UNS
@using Domain.Interfaces
@using Infrastructure.Services
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject UnsOrderService UnsOrderService
@inject OrdersBucketService OrdersBucketService

<PageTitle>Orders</PageTitle>

<h1>Orders</h1>


@if (demoOrders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>ERP State</th>
                <th>Description</th>
                <th>Type</th>
                <th>Start</th>
                <th>End</th>
                <th>Priority</th>
                <th>State</th>
                <th>Status</th>
                <th>MaterialId</th>
                <th>Component#</th>
                <th>Operation#</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var order in demoOrders)
            {
                <tr @onclick="()=>SelectedOrder(order)">
                    <td>@order.ID</td>
                    <td>@order.ERPState</td>
                    <td>@order.Description</td>
                    <td>@order.Type</td>
                    <td>@order.StartTime</td>
                    <td>@order.EndTime</td>
                    <td>@order.Priority</td>
                    <td>@order.OrderState</td>
                    <td>@order.Status</td>
                    <td>@order.MaterialId</td>
                    <td>@order.ComponentListMap.Count</td>
                    <td>@order.OperationsInstructionMap.Count</td>
                </tr>
            }
        </tbody>
    </table>


    <ErpSimulator.Components.Pages.Common.Modal IsVisible="@isModalVisible" IsVisibleChanged="@((bool value) => isModalVisible = value)">
        <button class="btn btn-primary" @onclick="CreateBucket">Create Bucket</button>
        <hr />
        <pre>@UnsOrderJson</pre>
    </ErpSimulator.Components.Pages.Common.Modal>
}

@code {
    private List<UnsOrder>? demoOrders;
    private string UnsOrderJson;
    private bool isModalVisible = false;
    private UnsOrder selectedOrder;

    protected override async Task OnInitializedAsync()
    {
        demoOrders = await UnsOrderService.GetUnsOrdersAsync();
    }

    private void SelectedOrder(UnsOrder order)
    {
        isModalVisible = true;
        UnsOrderJson = JsonSerializer.Serialize(order,new JsonSerializerOptions{WriteIndented = true});
        selectedOrder = order;
    }

    private async Task CreateBucket()
    {
        if (selectedOrder != null)
        {
            var newBucketOrder = new OrdersBucket
                {
                    UnsOrderId = selectedOrder.ID,
                    RequestCount = 1,
                    StartDate = DateTime.Now,
                    EndDate = DateTime.Now.AddDays(7)
                };

            await OrdersBucketService.CreateOrdersBucketAsync(newBucketOrder);
            StateHasChanged();
        }

        isModalVisible = false;
    }

}
