@page "/OrdersBucket"
@using Domain.Entities
@using System.Text.Json;
@using Domain.Entities.UNS
@using Domain.Interfaces
@using Infrastructure.Services
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject OrdersBucketService ordersBucketService

<PageTitle>Bucket Orders</PageTitle>

<h1>Bucket Orders</h1>

@if (buckets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>UNS Order Id</th>
                <th>Status</th>
                <th>Request Count</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Created</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in buckets)
            {
                <tr @onclick="()=>SelectedOrder(order)">
                    <td>@order.Id</td>
                    <td>@order.UnsOrder.ID</td>
                    <td>@order.State</td>
                    <td>@order.RequestCount</td>
                    <td>@order.StartDate</td>
                    <td>@order.EndDate</td>
                    <td>@order.Created</td>
                    @if (order.UnsOrders == null || order.UnsOrders.Count == 0)
                    {
                        <button class="btn btn-primary p-1 m-1" style="color: black;"  @onclick="()=>GenerateOrders(order)">Generate Orders</button>
                    }
                    else
                    {
                        if (order.State == Domain.Enums.BucketOrdersState.OrdersAreReady)
                        {
                            <button class="btn btn-primary p-1 m-1" style="color: black;" @onclick="()=>SendBucket(order)">Send to UNS</button>
                            <button class="btn btn-primary p-1 m-1" style="color: black;" @onclick="()=>SendBucketToSAP(order)">Send to SAP</button>
                        }
                        else if (order.State == Domain.Enums.BucketOrdersState.SendingOrders)
                        {
                            <p>Sending ...</p>
                        }
                        else
                        {
                            <p>All done!</p>
                        }

                    }
                </tr>
            }
        </tbody>
    </table>
}

<ErpSimulator.Components.Pages.Common.Modal IsVisible="@isModalVisible" IsVisibleChanged="@((bool value) => isModalVisible = value)">
    <div class="p-2 m-2">
        <EditForm Model="@selectedOrder">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="form-group p-2">
                <label for="status">Status</label>
                <InputSelect class="form-control" id="status" @bind-Value="selectedOrder.State">
                    @foreach (var status in Enum.GetValues(typeof(Domain.Enums.BucketOrdersState)))
                    {
                        <option value="@status">@status</option>
                    }
                </InputSelect>

                <label for="requestCount">Request Count</label>
                <InputNumber id="requestCount" class="form-control mb-3" @bind-Value="selectedOrder.RequestCount" />

                <label for="startDate">Start Date</label>
                <InputDate id="startDate" class="form-control mb-3" @bind-Value="selectedOrder.StartDate" />

                <label for="endDate">End Date</label>
                <InputDate id="endDate" class="form-control mb-3" @bind-Value="selectedOrder.EndDate" />
            </div>

            <div class="d-flex justify-content-between mt-2">
                <button type="submit" class="btn btn-success" @onclick="SaveChanges">Save</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteOrder">Delete</button>
            </div>
        </EditForm>
    </div>
</ErpSimulator.Components.Pages.Common.Modal>


@code {
    private List<OrdersBucket>? buckets;
    private bool isModalVisible = false;

    private OrdersBucket selectedOrder = new OrdersBucket();

    protected override async Task OnInitializedAsync()
    {
        buckets = await ordersBucketService.GetOrdersBucketAsync();
    }

    private async void GenerateOrders(OrdersBucket order)
    {
        await ordersBucketService.GenerateOrdersAsync(order);
        StateHasChanged();
    }

    private async void SendBucket(OrdersBucket order)

    {
        order.State = Domain.Enums.BucketOrdersState.SendingOrders;
        StateHasChanged();
        await ordersBucketService.Sent(order);
        StateHasChanged();
    }

    private void SelectedOrder(OrdersBucket order)
    {
        isModalVisible = true;
        selectedOrder = order;
    }

    private async void SendBucketToSAP(OrdersBucket order)
    {
        order.State = Domain.Enums.BucketOrdersState.SendingOrders;
        StateHasChanged();
        await ordersBucketService.SentToSAP(order);
        StateHasChanged();
    }


    private async Task DeleteOrder()
    {
        if (selectedOrder != null)
        {
            await ordersBucketService.DeleteOrdersBucketAsync(selectedOrder.Id);
            buckets.Remove(selectedOrder);
            selectedOrder = null;
            isModalVisible = false;
            StateHasChanged();
        }
    }

    private async Task SaveChanges()
    {
        await ordersBucketService.UpdateOrdersBucketAsync(selectedOrder);
        isModalVisible = false;
        StateHasChanged();
    }
}
